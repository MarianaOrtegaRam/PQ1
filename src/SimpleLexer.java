/* Generated By:JavaCC: Do not edit this line. SimpleLexer.java */
public class SimpleLexer implements SimpleLexerConstants {

        public int sigToken() {
           return ((jj_ntk==-1)?jj_ntk():jj_ntk);
     }

     public void aceptar(int kind) throws ParseException {
                jj_consume_token(kind);
     }

     public void avanzar() throws ParseException {
                jj_consume_token(getNextToken().kind);
     }

  final public int num() throws ParseException, Error {
        int total=1;
        Token token;
    token = jj_consume_token(INT);
                try {
                        total = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee)
                {
                        // Dada la forma de <ENTERO>, sabemos que solo puede tener d�gitos y signo
                        // Si cae ac� es por que el signo era +
                        {if (true) throw new Error("Numero demasiado grande"+token.image);}
                }
                {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public void Program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORWARD:
      case CLEARSCREEN:
      case PENUP:
      case PENDOWN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case HOME:
      case SETX:
      case SETY:
      case SETXY:
      case SETHEADING:
      case ARC:
      case CHANGESHAPE:
      case POS:
      case XCOR:
      case YCOR:
      case HEADING:
      case TOWARDS:
      case LABEL:
      case SETLABELHEIGHT:
      case REPEAT:
      case BACK:
      case SETWIDTH:
      case SETCOLOR:
      case PRINT:
      case RANDOM:
      case LEFT:
      case RIGHT:
      case MAKE:
      case SUM:
      case DIFFERENCE:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORWARD:
      case CLEARSCREEN:
      case PENUP:
      case PENDOWN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case HOME:
      case SETX:
      case SETY:
      case SETXY:
      case SETHEADING:
      case ARC:
      case CHANGESHAPE:
      case POS:
      case XCOR:
      case YCOR:
      case HEADING:
      case TOWARDS:
      case LABEL:
      case SETLABELHEIGHT:
      case REPEAT:
      case BACK:
      case SETWIDTH:
      case SETCOLOR:
      case PRINT:
      case RANDOM:
      case LEFT:
      case RIGHT:
      case MAKE:
      case SUM:
      case DIFFERENCE:
        Command();
        break;
      case PROCEDURE:
        ProcedureDeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORWARD:
      jj_consume_token(FORWARD);
      Number();
      break;
    case CLEARSCREEN:
      jj_consume_token(CLEARSCREEN);
      break;
    case PENUP:
      jj_consume_token(PENUP);
      break;
    case PENDOWN:
      jj_consume_token(PENDOWN);
      break;
    case HIDETURTLE:
      jj_consume_token(HIDETURTLE);
      break;
    case SHOWTURTLE:
      jj_consume_token(SHOWTURTLE);
      break;
    case HOME:
      jj_consume_token(HOME);
      break;
    case SETX:
      jj_consume_token(SETX);
      Number();
      break;
    case SETY:
      jj_consume_token(SETY);
      Number();
      break;
    case SETXY:
      jj_consume_token(SETXY);
      Number();
      Number();
      break;
    case SETHEADING:
      jj_consume_token(SETHEADING);
      Number();
      break;
    case ARC:
      jj_consume_token(ARC);
      Number();
      Number();
      break;
    case CHANGESHAPE:
      jj_consume_token(CHANGESHAPE);
      Number();
      break;
    case POS:
      jj_consume_token(POS);
      break;
    case XCOR:
      jj_consume_token(XCOR);
      break;
    case YCOR:
      jj_consume_token(YCOR);
      break;
    case HEADING:
      jj_consume_token(HEADING);
      break;
    case TOWARDS:
      jj_consume_token(TOWARDS);
      break;
    case LABEL:
      jj_consume_token(LABEL);
      Variable();
      break;
    case SETLABELHEIGHT:
      jj_consume_token(SETLABELHEIGHT);
      Number();
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      Number();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORWARD:
      case CLEARSCREEN:
      case PENUP:
      case PENDOWN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case HOME:
      case SETX:
      case SETY:
      case SETXY:
      case SETHEADING:
      case ARC:
      case CHANGESHAPE:
      case POS:
      case XCOR:
      case YCOR:
      case HEADING:
      case TOWARDS:
      case LABEL:
      case SETLABELHEIGHT:
      case REPEAT:
      case BACK:
      case SETWIDTH:
      case SETCOLOR:
      case PRINT:
      case RANDOM:
      case LEFT:
      case RIGHT:
      case MAKE:
      case SUM:
      case DIFFERENCE:
        Command();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    case BACK:
      jj_consume_token(BACK);
      Number();
      break;
    case SETWIDTH:
      jj_consume_token(SETWIDTH);
      Number();
      break;
    case SETCOLOR:
      jj_consume_token(SETCOLOR);
      Number();
      break;
    case PRINT:
      jj_consume_token(PRINT);
      Variable();
      break;
    case RANDOM:
      jj_consume_token(RANDOM);
      Number();
      break;
    case LEFT:
      jj_consume_token(LEFT);
      Number();
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      Number();
      break;
    case MAKE:
      jj_consume_token(MAKE);
      Variable();
      Number();
      break;
    case SUM:
      jj_consume_token(SUM);
      Number();
      Number();
      break;
    case DIFFERENCE:
      jj_consume_token(DIFFERENCE);
      Number();
      Number();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ProcedureDeclaration() throws ParseException {
    jj_consume_token(PROCEDURE);
    ProcedureName();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      ParameterName();
    }
    jj_consume_token(END);
  }

  final public void ParameterName() throws ParseException {
    jj_consume_token(49);
    Variable();
  }

  final public void ProcedureName() throws ParseException {
    Variable();
  }

  final public void Number() throws ParseException {
    jj_consume_token(INT);
  }

  final public void Variable() throws ParseException {
    jj_consume_token(VARIABLE);
  }

  /** Generated Token Manager. */
  public SimpleLexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffe000,0xffffe000,0xffffe000,0xffffe000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1fff,0x1fff,0xfff,0xfff,0x20000,};
   }

  /** Constructor with InputStream. */
  public SimpleLexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleLexer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleLexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleLexer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleLexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleLexer(SimpleLexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleLexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
